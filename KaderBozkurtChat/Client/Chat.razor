@using KaderBozkurtChat.Shared 
@page "/chat"
@inject NavigationManager navigationManager

<div class="top-row px-4">
    @if (chatting)
    {
        <p>You are connected as <b>@username</b></p>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    }
</div>

<div class="content px-4">

    <h1>Chat</h1>

    @if (!chatting)
    {
        <p>
            Enter your name to start chatting:
        </p>

        <input type="text" maxlength="32" @bind="@username" />
        <button type="button" @onclick= '@ChatHub'><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

        @if (message != null)
        {
            <div class="invalid-feedback">@message</div>
            <small id="emailHelp" class="form-text text-muted">@message</small>
        }
    }

    @if (chatting)
    {
        <div id="scrollbox">

            @foreach (var item in messages)
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
            <hr />
            <textarea class="input-lg" placeholder="enter your massage" @bind="@newMessage"></textarea>
            <button class="btn btn-outline-primary" @onclick="@SendAsync">Send</button>
        </div>
    }
</div>

@code  {
  
    private bool chatting = false;


   private string username = null;

    private  ChatClient client = null;

    
   private string message = null;

   private string newMessage = null;

  List<Message> messages = new List<Message>();

    
   async Task ChatHub()
    {
        
        if (string.IsNullOrWhiteSpace(username))
        {
            message = "Please enter a name";
            return;
        };

        try
        {
           
            messages.Clear();

            
            string baseUrl = navigationManager.BaseUri;
            client = new ChatClient(username, baseUrl);
            // add an event handler for incoming messages
            client.MessageReceived += MessageReceived;
             Console.WriteLine("Index: chart starting...");
            await client.StartAsync();
            Console.WriteLine("Index: chart started?");

            chatting = true;
        }
        catch (Exception e)
        {
            message = $"ERROR: Failed to start chat client: {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }

    
    void MessageReceived(object sender, MessageReceivedEventArgs e)
    {
        Console.WriteLine($"Blazor: receive {e.Username}: {e.Message}");
        bool isMine = false;
        if (!string.IsNullOrWhiteSpace(e.Username))
        {
            isMine = string.Equals(e.Username, username, StringComparison.CurrentCultureIgnoreCase);
        }

        var newMsg = new Message(e.Username, e.Message, isMine);
        messages.Add(newMsg);

         StateHasChanged();
    }

    async Task DisconnectAsync()
    {
        if (chatting)
        {
            await client.StopAsync();
            client = null;
            message = "chat ended";
            chatting = false;
        }
    }

    async Task SendAsync()
    {
        if (chatting && !string.IsNullOrWhiteSpace(newMessage))
        {
           
            await client.SendAsync(newMessage);
            // clear input box
            newMessage = "";
        }
    }

    class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

      
             
        public string CSS
        {
            get
            {
                return Mine ? "sent" : "received";
            }
        }
    }
}
